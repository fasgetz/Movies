//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MoviesModel", "FK_ActorsFilm_Actors", "Actors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Movies.DataModel.Actor), "ActorsFilm", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Movies.DataModel.ActorsFilm), true)]
[assembly: EdmRelationshipAttribute("MoviesModel", "FK_ActorsFilm_Films", "Films", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Movies.DataModel.Film), "ActorsFilm", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Movies.DataModel.ActorsFilm), true)]
[assembly: EdmRelationshipAttribute("MoviesModel", "FK_Ratings_Films", "Films", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Movies.DataModel.Film), "Ratings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Movies.DataModel.Rating), true)]
[assembly: EdmRelationshipAttribute("MoviesModel", "FK_Ratings_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Movies.DataModel.User), "Ratings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Movies.DataModel.Rating), true)]
[assembly: EdmRelationshipAttribute("MoviesModel", "FK_Users_Status", "Status", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Movies.DataModel.Status), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Movies.DataModel.User), true)]

#endregion

namespace Movies.DataModel
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MyDB : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MyDB object using the connection string found in the 'MyDB' section of the application configuration file.
        /// </summary>
        public MyDB() : base("name=MyDB", "MyDB")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MyDB object.
        /// </summary>
        public MyDB(string connectionString) : base(connectionString, "MyDB")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MyDB object.
        /// </summary>
        public MyDB(EntityConnection connection) : base(connection, "MyDB")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Actor> Actors
        {
            get
            {
                if ((_Actors == null))
                {
                    _Actors = base.CreateObjectSet<Actor>("Actors");
                }
                return _Actors;
            }
        }
        private ObjectSet<Actor> _Actors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ActorsFilm> ActorsFilms
        {
            get
            {
                if ((_ActorsFilms == null))
                {
                    _ActorsFilms = base.CreateObjectSet<ActorsFilm>("ActorsFilms");
                }
                return _ActorsFilms;
            }
        }
        private ObjectSet<ActorsFilm> _ActorsFilms;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Film> Films
        {
            get
            {
                if ((_Films == null))
                {
                    _Films = base.CreateObjectSet<Film>("Films");
                }
                return _Films;
            }
        }
        private ObjectSet<Film> _Films;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Producer> Producers
        {
            get
            {
                if ((_Producers == null))
                {
                    _Producers = base.CreateObjectSet<Producer>("Producers");
                }
                return _Producers;
            }
        }
        private ObjectSet<Producer> _Producers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Rating> Ratings
        {
            get
            {
                if ((_Ratings == null))
                {
                    _Ratings = base.CreateObjectSet<Rating>("Ratings");
                }
                return _Ratings;
            }
        }
        private ObjectSet<Rating> _Ratings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Status> Status
        {
            get
            {
                if ((_Status == null))
                {
                    _Status = base.CreateObjectSet<Status>("Status");
                }
                return _Status;
            }
        }
        private ObjectSet<Status> _Status;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Actors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActors(Actor actor)
        {
            base.AddObject("Actors", actor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActorsFilms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActorsFilms(ActorsFilm actorsFilm)
        {
            base.AddObject("ActorsFilms", actorsFilm);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Films EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilms(Film film)
        {
            base.AddObject("Films", film);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Producers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProducers(Producer producer)
        {
            base.AddObject("Producers", producer);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Ratings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRatings(Rating rating)
        {
            base.AddObject("Ratings", rating);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Status EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStatus(Status status)
        {
            base.AddObject("Status", status);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="Actor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Actor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Actor object.
        /// </summary>
        /// <param name="idActor">Initial value of the IdActor property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="family">Initial value of the Family property.</param>
        /// <param name="gender">Initial value of the Gender property.</param>
        public static Actor CreateActor(global::System.Int32 idActor, global::System.String name, global::System.String family, global::System.String gender)
        {
            Actor actor = new Actor();
            actor.IdActor = idActor;
            actor.Name = name;
            actor.Family = family;
            actor.Gender = gender;
            return actor;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdActor
        {
            get
            {
                return _IdActor;
            }
            set
            {
                if (_IdActor != value)
                {
                    OnIdActorChanging(value);
                    ReportPropertyChanging("IdActor");
                    _IdActor = StructuralObject.SetValidValue(value, "IdActor");
                    ReportPropertyChanged("IdActor");
                    OnIdActorChanged();
                }
            }
        }
        private global::System.Int32 _IdActor;
        partial void OnIdActorChanging(global::System.Int32 value);
        partial void OnIdActorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Family
        {
            get
            {
                return _Family;
            }
            set
            {
                OnFamilyChanging(value);
                ReportPropertyChanging("Family");
                _Family = StructuralObject.SetValidValue(value, false, "Family");
                ReportPropertyChanged("Family");
                OnFamilyChanged();
            }
        }
        private global::System.String _Family;
        partial void OnFamilyChanging(global::System.String value);
        partial void OnFamilyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                OnSurnameChanging(value);
                ReportPropertyChanging("Surname");
                _Surname = StructuralObject.SetValidValue(value, true, "Surname");
                ReportPropertyChanged("Surname");
                OnSurnameChanged();
            }
        }
        private global::System.String _Surname;
        partial void OnSurnameChanging(global::System.String value);
        partial void OnSurnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Gender
        {
            get
            {
                return _Gender;
            }
            set
            {
                OnGenderChanging(value);
                ReportPropertyChanging("Gender");
                _Gender = StructuralObject.SetValidValue(value, false, "Gender");
                ReportPropertyChanged("Gender");
                OnGenderChanged();
            }
        }
        private global::System.String _Gender;
        partial void OnGenderChanging(global::System.String value);
        partial void OnGenderChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_ActorsFilm_Actors", "ActorsFilm")]
        public EntityCollection<ActorsFilm> ActorsFilms
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ActorsFilm>("MoviesModel.FK_ActorsFilm_Actors", "ActorsFilm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ActorsFilm>("MoviesModel.FK_ActorsFilm_Actors", "ActorsFilm", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="ActorsFilm")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ActorsFilm : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ActorsFilm object.
        /// </summary>
        /// <param name="idFilm">Initial value of the IdFilm property.</param>
        /// <param name="idActor">Initial value of the IdActor property.</param>
        public static ActorsFilm CreateActorsFilm(global::System.Int32 idFilm, global::System.Int32 idActor)
        {
            ActorsFilm actorsFilm = new ActorsFilm();
            actorsFilm.IdFilm = idFilm;
            actorsFilm.IdActor = idActor;
            return actorsFilm;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdFilm
        {
            get
            {
                return _IdFilm;
            }
            set
            {
                if (_IdFilm != value)
                {
                    OnIdFilmChanging(value);
                    ReportPropertyChanging("IdFilm");
                    _IdFilm = StructuralObject.SetValidValue(value, "IdFilm");
                    ReportPropertyChanged("IdFilm");
                    OnIdFilmChanged();
                }
            }
        }
        private global::System.Int32 _IdFilm;
        partial void OnIdFilmChanging(global::System.Int32 value);
        partial void OnIdFilmChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdActor
        {
            get
            {
                return _IdActor;
            }
            set
            {
                if (_IdActor != value)
                {
                    OnIdActorChanging(value);
                    ReportPropertyChanging("IdActor");
                    _IdActor = StructuralObject.SetValidValue(value, "IdActor");
                    ReportPropertyChanged("IdActor");
                    OnIdActorChanged();
                }
            }
        }
        private global::System.Int32 _IdActor;
        partial void OnIdActorChanging(global::System.Int32 value);
        partial void OnIdActorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Role
        {
            get
            {
                return _Role;
            }
            set
            {
                OnRoleChanging(value);
                ReportPropertyChanging("Role");
                _Role = StructuralObject.SetValidValue(value, true, "Role");
                ReportPropertyChanged("Role");
                OnRoleChanged();
            }
        }
        private global::System.String _Role;
        partial void OnRoleChanging(global::System.String value);
        partial void OnRoleChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_ActorsFilm_Actors", "Actors")]
        public Actor Actor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Actor>("MoviesModel.FK_ActorsFilm_Actors", "Actors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Actor>("MoviesModel.FK_ActorsFilm_Actors", "Actors").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Actor> ActorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Actor>("MoviesModel.FK_ActorsFilm_Actors", "Actors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Actor>("MoviesModel.FK_ActorsFilm_Actors", "Actors", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_ActorsFilm_Films", "Films")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MoviesModel.FK_ActorsFilm_Films", "Films").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MoviesModel.FK_ActorsFilm_Films", "Films").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MoviesModel.FK_ActorsFilm_Films", "Films");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MoviesModel.FK_ActorsFilm_Films", "Films", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="Film")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Film : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Film object.
        /// </summary>
        /// <param name="idFilm">Initial value of the IdFilm property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="idProducer">Initial value of the IdProducer property.</param>
        /// <param name="idGenre">Initial value of the IdGenre property.</param>
        public static Film CreateFilm(global::System.Int32 idFilm, global::System.String name, global::System.Int32 idProducer, global::System.Int32 idGenre)
        {
            Film film = new Film();
            film.IdFilm = idFilm;
            film.Name = name;
            film.IdProducer = idProducer;
            film.IdGenre = idGenre;
            return film;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdFilm
        {
            get
            {
                return _IdFilm;
            }
            set
            {
                if (_IdFilm != value)
                {
                    OnIdFilmChanging(value);
                    ReportPropertyChanging("IdFilm");
                    _IdFilm = StructuralObject.SetValidValue(value, "IdFilm");
                    ReportPropertyChanged("IdFilm");
                    OnIdFilmChanged();
                }
            }
        }
        private global::System.Int32 _IdFilm;
        partial void OnIdFilmChanging(global::System.Int32 value);
        partial void OnIdFilmChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdProducer
        {
            get
            {
                return _IdProducer;
            }
            set
            {
                OnIdProducerChanging(value);
                ReportPropertyChanging("IdProducer");
                _IdProducer = StructuralObject.SetValidValue(value, "IdProducer");
                ReportPropertyChanged("IdProducer");
                OnIdProducerChanged();
            }
        }
        private global::System.Int32 _IdProducer;
        partial void OnIdProducerChanging(global::System.Int32 value);
        partial void OnIdProducerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value, "Year");
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private Nullable<global::System.DateTime> _Year;
        partial void OnYearChanging(Nullable<global::System.DateTime> value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdGenre
        {
            get
            {
                return _IdGenre;
            }
            set
            {
                OnIdGenreChanging(value);
                ReportPropertyChanging("IdGenre");
                _IdGenre = StructuralObject.SetValidValue(value, "IdGenre");
                ReportPropertyChanged("IdGenre");
                OnIdGenreChanged();
            }
        }
        private global::System.Int32 _IdGenre;
        partial void OnIdGenreChanging(global::System.Int32 value);
        partial void OnIdGenreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value, "Rating");
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private Nullable<global::System.Int32> _Rating;
        partial void OnRatingChanging(Nullable<global::System.Int32> value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Poster
        {
            get
            {
                return StructuralObject.GetValidValue(_Poster);
            }
            set
            {
                OnPosterChanging(value);
                ReportPropertyChanging("Poster");
                _Poster = StructuralObject.SetValidValue(value, true, "Poster");
                ReportPropertyChanged("Poster");
                OnPosterChanged();
            }
        }
        private global::System.Byte[] _Poster;
        partial void OnPosterChanging(global::System.Byte[] value);
        partial void OnPosterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, true, "Country");
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_ActorsFilm_Films", "ActorsFilm")]
        public EntityCollection<ActorsFilm> ActorsFilms
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ActorsFilm>("MoviesModel.FK_ActorsFilm_Films", "ActorsFilm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ActorsFilm>("MoviesModel.FK_ActorsFilm_Films", "ActorsFilm", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_Ratings_Films", "Ratings")]
        public EntityCollection<Rating> Ratings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Rating>("MoviesModel.FK_Ratings_Films", "Ratings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Rating>("MoviesModel.FK_Ratings_Films", "Ratings", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="idGenre">Initial value of the IdGenre property.</param>
        /// <param name="genreName">Initial value of the GenreName property.</param>
        public static Genre CreateGenre(global::System.Int32 idGenre, global::System.String genreName)
        {
            Genre genre = new Genre();
            genre.IdGenre = idGenre;
            genre.GenreName = genreName;
            return genre;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdGenre
        {
            get
            {
                return _IdGenre;
            }
            set
            {
                if (_IdGenre != value)
                {
                    OnIdGenreChanging(value);
                    ReportPropertyChanging("IdGenre");
                    _IdGenre = StructuralObject.SetValidValue(value, "IdGenre");
                    ReportPropertyChanged("IdGenre");
                    OnIdGenreChanged();
                }
            }
        }
        private global::System.Int32 _IdGenre;
        partial void OnIdGenreChanging(global::System.Int32 value);
        partial void OnIdGenreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GenreName
        {
            get
            {
                return _GenreName;
            }
            set
            {
                OnGenreNameChanging(value);
                ReportPropertyChanging("GenreName");
                _GenreName = StructuralObject.SetValidValue(value, false, "GenreName");
                ReportPropertyChanged("GenreName");
                OnGenreNameChanged();
            }
        }
        private global::System.String _GenreName;
        partial void OnGenreNameChanging(global::System.String value);
        partial void OnGenreNameChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="Producer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Producer : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Producer object.
        /// </summary>
        /// <param name="idProducer">Initial value of the idProducer property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="family">Initial value of the Family property.</param>
        /// <param name="gender">Initial value of the Gender property.</param>
        public static Producer CreateProducer(global::System.Int32 idProducer, global::System.String name, global::System.String family, global::System.String gender)
        {
            Producer producer = new Producer();
            producer.idProducer = idProducer;
            producer.Name = name;
            producer.Family = family;
            producer.Gender = gender;
            return producer;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 idProducer
        {
            get
            {
                return _idProducer;
            }
            set
            {
                if (_idProducer != value)
                {
                    OnidProducerChanging(value);
                    ReportPropertyChanging("idProducer");
                    _idProducer = StructuralObject.SetValidValue(value, "idProducer");
                    ReportPropertyChanged("idProducer");
                    OnidProducerChanged();
                }
            }
        }
        private global::System.Int32 _idProducer;
        partial void OnidProducerChanging(global::System.Int32 value);
        partial void OnidProducerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Family
        {
            get
            {
                return _Family;
            }
            set
            {
                OnFamilyChanging(value);
                ReportPropertyChanging("Family");
                _Family = StructuralObject.SetValidValue(value, false, "Family");
                ReportPropertyChanged("Family");
                OnFamilyChanged();
            }
        }
        private global::System.String _Family;
        partial void OnFamilyChanging(global::System.String value);
        partial void OnFamilyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                OnSurnameChanging(value);
                ReportPropertyChanging("Surname");
                _Surname = StructuralObject.SetValidValue(value, true, "Surname");
                ReportPropertyChanged("Surname");
                OnSurnameChanged();
            }
        }
        private global::System.String _Surname;
        partial void OnSurnameChanging(global::System.String value);
        partial void OnSurnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Gender
        {
            get
            {
                return _Gender;
            }
            set
            {
                OnGenderChanging(value);
                ReportPropertyChanging("Gender");
                _Gender = StructuralObject.SetValidValue(value, false, "Gender");
                ReportPropertyChanged("Gender");
                OnGenderChanged();
            }
        }
        private global::System.String _Gender;
        partial void OnGenderChanging(global::System.String value);
        partial void OnGenderChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="Rating")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Rating : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Rating object.
        /// </summary>
        /// <param name="idRating">Initial value of the IdRating property.</param>
        /// <param name="idFilm">Initial value of the IdFilm property.</param>
        /// <param name="idUser">Initial value of the IdUser property.</param>
        public static Rating CreateRating(global::System.Int32 idRating, global::System.Int32 idFilm, global::System.Int32 idUser)
        {
            Rating rating = new Rating();
            rating.IdRating = idRating;
            rating.IdFilm = idFilm;
            rating.IdUser = idUser;
            return rating;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdRating
        {
            get
            {
                return _IdRating;
            }
            set
            {
                if (_IdRating != value)
                {
                    OnIdRatingChanging(value);
                    ReportPropertyChanging("IdRating");
                    _IdRating = StructuralObject.SetValidValue(value, "IdRating");
                    ReportPropertyChanged("IdRating");
                    OnIdRatingChanged();
                }
            }
        }
        private global::System.Int32 _IdRating;
        partial void OnIdRatingChanging(global::System.Int32 value);
        partial void OnIdRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdFilm
        {
            get
            {
                return _IdFilm;
            }
            set
            {
                OnIdFilmChanging(value);
                ReportPropertyChanging("IdFilm");
                _IdFilm = StructuralObject.SetValidValue(value, "IdFilm");
                ReportPropertyChanged("IdFilm");
                OnIdFilmChanged();
            }
        }
        private global::System.Int32 _IdFilm;
        partial void OnIdFilmChanging(global::System.Int32 value);
        partial void OnIdFilmChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdUser
        {
            get
            {
                return _IdUser;
            }
            set
            {
                OnIdUserChanging(value);
                ReportPropertyChanging("IdUser");
                _IdUser = StructuralObject.SetValidValue(value, "IdUser");
                ReportPropertyChanged("IdUser");
                OnIdUserChanged();
            }
        }
        private global::System.Int32 _IdUser;
        partial void OnIdUserChanging(global::System.Int32 value);
        partial void OnIdUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true, "Comment");
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Rating1
        {
            get
            {
                return _Rating1;
            }
            set
            {
                OnRating1Changing(value);
                ReportPropertyChanging("Rating1");
                _Rating1 = StructuralObject.SetValidValue(value, "Rating1");
                ReportPropertyChanged("Rating1");
                OnRating1Changed();
            }
        }
        private Nullable<global::System.Int32> _Rating1;
        partial void OnRating1Changing(Nullable<global::System.Int32> value);
        partial void OnRating1Changed();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_Ratings_Films", "Films")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MoviesModel.FK_Ratings_Films", "Films").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MoviesModel.FK_Ratings_Films", "Films").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MoviesModel.FK_Ratings_Films", "Films");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MoviesModel.FK_Ratings_Films", "Films", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_Ratings_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("MoviesModel.FK_Ratings_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("MoviesModel.FK_Ratings_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("MoviesModel.FK_Ratings_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("MoviesModel.FK_Ratings_Users", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="Status")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Status : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Status object.
        /// </summary>
        /// <param name="idStatus">Initial value of the IdStatus property.</param>
        /// <param name="statusName">Initial value of the StatusName property.</param>
        public static Status CreateStatus(global::System.Int32 idStatus, global::System.String statusName)
        {
            Status status = new Status();
            status.IdStatus = idStatus;
            status.StatusName = statusName;
            return status;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdStatus
        {
            get
            {
                return _IdStatus;
            }
            set
            {
                if (_IdStatus != value)
                {
                    OnIdStatusChanging(value);
                    ReportPropertyChanging("IdStatus");
                    _IdStatus = StructuralObject.SetValidValue(value, "IdStatus");
                    ReportPropertyChanged("IdStatus");
                    OnIdStatusChanged();
                }
            }
        }
        private global::System.Int32 _IdStatus;
        partial void OnIdStatusChanging(global::System.Int32 value);
        partial void OnIdStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StatusName
        {
            get
            {
                return _StatusName;
            }
            set
            {
                OnStatusNameChanging(value);
                ReportPropertyChanging("StatusName");
                _StatusName = StructuralObject.SetValidValue(value, false, "StatusName");
                ReportPropertyChanged("StatusName");
                OnStatusNameChanged();
            }
        }
        private global::System.String _StatusName;
        partial void OnStatusNameChanging(global::System.String value);
        partial void OnStatusNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_Users_Status", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("MoviesModel.FK_Users_Status", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("MoviesModel.FK_Users_Status", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MoviesModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="idUser">Initial value of the IdUser property.</param>
        /// <param name="login">Initial value of the Login property.</param>
        /// <param name="pass">Initial value of the Pass property.</param>
        /// <param name="idStatus">Initial value of the IdStatus property.</param>
        public static User CreateUser(global::System.Int32 idUser, global::System.String login, global::System.String pass, global::System.Int32 idStatus)
        {
            User user = new User();
            user.IdUser = idUser;
            user.Login = login;
            user.Pass = pass;
            user.IdStatus = idStatus;
            return user;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdUser
        {
            get
            {
                return _IdUser;
            }
            set
            {
                if (_IdUser != value)
                {
                    OnIdUserChanging(value);
                    ReportPropertyChanging("IdUser");
                    _IdUser = StructuralObject.SetValidValue(value, "IdUser");
                    ReportPropertyChanged("IdUser");
                    OnIdUserChanged();
                }
            }
        }
        private global::System.Int32 _IdUser;
        partial void OnIdUserChanging(global::System.Int32 value);
        partial void OnIdUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false, "Login");
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Pass
        {
            get
            {
                return _Pass;
            }
            set
            {
                OnPassChanging(value);
                ReportPropertyChanging("Pass");
                _Pass = StructuralObject.SetValidValue(value, false, "Pass");
                ReportPropertyChanged("Pass");
                OnPassChanged();
            }
        }
        private global::System.String _Pass;
        partial void OnPassChanging(global::System.String value);
        partial void OnPassChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdStatus
        {
            get
            {
                return _IdStatus;
            }
            set
            {
                OnIdStatusChanging(value);
                ReportPropertyChanging("IdStatus");
                _IdStatus = StructuralObject.SetValidValue(value, "IdStatus");
                ReportPropertyChanged("IdStatus");
                OnIdStatusChanged();
            }
        }
        private global::System.Int32 _IdStatus;
        partial void OnIdStatusChanging(global::System.Int32 value);
        partial void OnIdStatusChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_Ratings_Users", "Ratings")]
        public EntityCollection<Rating> Ratings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Rating>("MoviesModel.FK_Ratings_Users", "Ratings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Rating>("MoviesModel.FK_Ratings_Users", "Ratings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MoviesModel", "FK_Users_Status", "Status")]
        public Status Status
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("MoviesModel.FK_Users_Status", "Status").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("MoviesModel.FK_Users_Status", "Status").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Status> StatusReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("MoviesModel.FK_Users_Status", "Status");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Status>("MoviesModel.FK_Users_Status", "Status", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
